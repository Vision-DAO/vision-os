/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Idea",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Idea__factory>;
    getContractFactory(
      name: "MetaProp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetaProp__factory>;
    getContractFactory(
      name: "IHasMetadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHasMetadata__factory>;
    getContractFactory(
      name: "Proposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proposal__factory>;
    getContractFactory(
      name: "Proposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proposal__factory>;
    getContractFactory(
      name: "RecoveryGroup",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RecoveryGroup__factory>;
    getContractFactory(
      name: "RecoveryProp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RecoveryProp__factory>;
    getContractFactory(
      name: "User",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.User__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Idea",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Idea>;
    getContractAt(
      name: "MetaProp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MetaProp>;
    getContractAt(
      name: "IHasMetadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHasMetadata>;
    getContractAt(
      name: "Proposal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proposal>;
    getContractAt(
      name: "Proposal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proposal>;
    getContractAt(
      name: "RecoveryGroup",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RecoveryGroup>;
    getContractAt(
      name: "RecoveryProp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RecoveryProp>;
    getContractAt(
      name: "User",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.User>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
